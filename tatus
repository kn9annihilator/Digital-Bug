[33mcommit 4d904114d38052a223445d0b1c7da47d1ec8d653[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmain[m[33m, [m[1;31morigin/main[m[33m)[m
Author: Krishna <public.contact.krishna@gmail.com>
Date:   Sun Aug 3 15:32:53 2025 +0530

    Finalizing the project with Readme file

[1mdiff --git a/Digital-Bug/Readme.md b/Digital-Bug/Readme.md[m
[1mindex 1c8f0f4..ee864ab 100644[m
[1m--- a/Digital-Bug/Readme.md[m
[1m+++ b/Digital-Bug/Readme.md[m
[36m@@ -1,35 +1,63 @@[m
[31m-<p align="center">[m
[31m-<img src="https://img.shields.io/github/stars/your-username/Digital-Bug?style=for-the-badge&logo=github" alt="GitHub Stars"/>[m
[31m-<img src="https://img.shields.io/github/forks/your-username/Digital-Bug?style=for-the-badge&logo=github" alt="GitHub Forks"/>[m
[31m-<img src="https://img.shields.io/github/issues/your-username/Digital-Bug?style=for-the-badge&logo=github" alt="GitHub Issues"/>[m
[31m-<img src="https://img.shields.io/github/last-commit/your-username/Digital-Bug?style=for-the-badge&logo=git" alt="GitHub Last Commit"/>[m
[31m-<br>[m
[31m-<img src="https://img.shields.io/badge/Platform-ESP8266-blue.svg?style=for-the-badge&logo=espressif" alt="Platform"/>[m
[31m-<img src="https://img.shields.io/badge/Framework-Arduino-00979D.svg?style=for-the-badge&logo=arduino" alt="Framework"/>[m
[31m-<img src="https://img.shields.io/badge/License-MIT-yellow.svg?style=for-the-badge" alt="License: MIT"/>[m
[31m-</p>[m
[32m+[m[32m<!-- GitHub Stars -->[m
[32m+[m[32m![GitHub stars](https://img.shields.io/github/stars/kn9annihilator/Digital-Bug?style=social)[m
[32m+[m
[32m+[m[32m<!-- GitHub Issues -->[m
[32m+[m[32m![GitHub issues](https://img.shields.io/github/issues/kn9annihilator/Digital-Bug)[m
[32m+[m
[32m+[m[32m<!-- Last Commit -->[m
[32m+[m[32m![Last Commit](https://img.shields.io/github/last-commit/kn9annihilator/Digital-Bug)[m
[32m+[m
[32m+[m[32m<!-- Platform (ESP8266) -->[m
[32m+[m[32m![Platform](https://img.shields.io/badge/platform-ESP8266-blue)[m
[32m+[m
[32m+[m[32m<!-- License: MIT -->[m
[32m+[m[32m![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)[m
[32m+[m
[32m+[m[32m<!-- Project Status -->[m
[32m+[m[32m![Status](https://img.shields.io/badge/status-complete-brightgreen)[m
[32m+[m
[32m+[m[32m<!-- Funny/Cool Badge -->[m
[32m+[m[32m![Made with Rage and Coffee](https://img.shields.io/badge/made%20with-rage%20%26%20coffee-critical?logo=buymeacoffee&logoColor=white)[m
[32m+[m
 [m
 # Digital Bug[m
 [m
 [m
[31m-A multi-mode Wi-Fi security and analysis tool for the ESP8266. Digital Bug can operate as an interactive, web-controlled scanner or as an autonomous, "fire-and-forget" passive logger.[m
[32m+[m[32mhttps://img.shields.io/badge/left-right-f39f37[m
[32m+[m
[32m+[m[32mDigital Bug is a versatile Wi-Fi security and network analysis tool built for the ESP8266 microcontroller. It is designed for both interactive, controlled testing and covert, long-term reconnaissance, making it a valuable asset for penetration testers and cybersecurity professionals.[m
 [m
 ---[m
 [m
 ## ‚ö†Ô∏è Disclaimer[m
 [m
[31m-This tool is for educational and professional testing purposes on networks you own or have explicit permission to test. Using this tool on any other network is "illegal" and "unethical". The user assumes all liability for their actions.[m
[32m+[m[32mThis tool is intended strictly for educational purposes and for authorized security testing on networks that you own or have explicit, written permission to assess. Unauthorized use of this tool on any network is illegal and unethical. The developers and contributors assume no liability and are not responsible for any misuse or damage caused by this program.[m
 [m
 ---[m
 [m
 ## Features[m
[32m+[m[41m    [m
[32m+[m[32mDigital Bug operates in two distinct modes, providing flexibility for various security assessment scenarios.[m
[32m+[m
[32m+[m[32m* Interactive Mode: The device hosts its own Wi-Fi access point, serving a comprehensive web interface to a connected device. This control panel allows for real-time network analysis and attack execution.[m
[32m+[m
[32m+[m[32m  * Access Point Scanner: Discovers and lists all nearby 802.11 networks, detailing their SSID, BSSID, signal strength (RSSI), channel, and encryption type.[m
[32m+[m
[32m+[m[32m  * Client Scanner: Identifies and lists all client devices connected to a specific target access point.[m
[32m+[m
[32m+[m[32m  * Probe Request Sniffer: Captures and displays probe requests to reveal the SSIDs that nearby devices are actively searching for.[m
[32m+[m
[32m+[m[32m  * Deauthentication Attack: Launches a targeted denial-of-service attack against selected clients to test network resilience and client reconnection behavior.[m
[32m+[m
[32m+[m[32m  * Dynamic Configuration: Allows for on-the-fly changes to the tool's own access point SSID and password via the web interface.[m
[32m+[m
[32m+[m[32m* Autonomous Mode: Designed for covert deployment, this mode operates silently without broadcasting its own network. It passively logs all discovered network traffic to internal files for later retrieval and analysis.[m
 [m
[31m-* Dual-Mode Operation:[m
[31m-    * Interactive Mode: Control the tool via a clean web interface hosted on the ESP8266 itself.[m
[31m-    * Autonomous Mode: Power it on and let it passively log all network activity to its internal memory.[m
[31m-* Wi-Fi Scanner: Discovers all nearby Access Points and client devices.[m
[31m-* Network Analysis: Identifies client/AP relationships and sniffs for probe requests to reveal hidden networks.[m
[31m-* Deauthentication Attack: A targeted DoS attack to test network resilience.[m
[32m+[m[32m  * Silent AP Logging: Scans for and logs all unique access points to a networks.log file.[m
[32m+[m
[32m+[m[32m  * Silent Probe Logging: Captures and logs all unique probe requests to a probes.log file.[m
[32m+[m
[32m+[m[32m  * Stealth Operation: Provides no active feedback other than a discreet "heartbeat" LED blink, ensuring a minimal physical footprint.[m
 [m
 ## Project structure[m
 ```js[m
[36m@@ -55,8 +83,10 @@[m [mDigital-Bug/[m
 [m
 * **An ESP8266-based board** (e.g., NodeMCU, Wemos D1 Mini)  [m
   [Buy NodeMCU (ESP8266) on Amazon](https://www.amazon.in/dp/B0829Z1W6Y)[m
[31m-* Arduino IDE with the ESP8266 board manager installed.[m
[31m-* Required Arduino Libraries (list to be added).[m
[32m+[m[32m* Visual Studio Code with the PlatformIO IDE extension installed:[m
[32m+[m[32m![alt text](image-1.png)[m
[32m+[m
[32m+[m[32m* A micro-USB cable that supports data transfer.[m
 [m
 ### Installation[m
 [m
[36m@@ -64,41 +94,45 @@[m [mDigital-Bug/[m
 ```git[m
 git clone https://github.com/kn9annihilator/Digital-Bug/[m
 ```[m
[31m-2.  Open the `.ino` file in the Arduino IDE.[m
[31m-3.  Install the required libraries.[m
[31m-4.  Upload the code to your ESP8266.[m
[31m-[m
[31m-### Setting up Arduino IDE[m
[31m-1. Connect your ESP 8266 wifi module using a micro usb 'data transfer' cable to any usb port on your laptop[m
[31m-2. Select the right board, as shown in the image:[m
[31m-![alt text](image.png)[m
[31m-3. Using "CTRL+,", go to preferences and use insert this in the "Additional Board Manager" ->[m
[31m-```html[m
[31m-http://arduino.esp8266.com/stable/package_esp8266com_index.json[m
[31m-```[m
[31m-4. Set Port to COM5 or COM6(whatever available)[m
[32m+[m[32m2. Open the cloned Digital-Bug folder in Visual Studio Code with PlatformIO.[m
[32m+[m
[32m+[m[32m3. PlatformIO will automatically detect the platformio.ini file and install the necessary libraries and dependencies (e.g., ArduinoJson).[m
[32m+[m
[32m+[m[32m3. Upload the filesystem image to the board. In PlatformIO, navigate to Project Tasks > nodemcuv2 > Platform > Upload Filesystem Image.[m
[32m+[m
[32m+[m[32m4. Upload the main program to the board by clicking the Upload button (‚ñ∂Ô∏è icon) in the PlatformIO toolbar.[m
 [m
[31m----[m
 [m
 ##  Usage[m
 [m
 #